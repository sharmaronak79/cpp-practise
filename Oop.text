Object oriented programming is a way of solving 
complex problems by breaking them into 
smaller problems using objects. 
Before Object Oriented Programming (commonly referred as OOP),
 programs were written in procedural language,
 they were nothing but a long list of 
instructions. On the other hand, 
the OOP is all about creating objects 
that can interact with each other,
 this makes it easier to develop programs 
in OOP as we can understand the relationship 
between them.

Class and Objects

A class is like a blueprint of data 
member and functions and object is 
an instance of class. For example,
 lets say we have a class Car which 
has data members (variables) such 
as speed, weight, price and 
functions such as gearChange(), 
slowDown(), brake() etc. 
Now lets say I create a object of 
this class named FordFigo which 
uses these data members and functions 
and give them its own values. 
Similarly we can create as many 
objects as we want using the 
blueprint(class).



C++ What is OOP?
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or functions that perform operations on the data, 
while object-oriented programming is about creating objects that contain both data and functions.



Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the C++ code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time

Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code.
You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.


